---
title: Identify
---

%h2 Identify

%p Identify is how you send Trak.io <a href='/properties.html#person'>properties</a> about a person like Email, Name, Account Type, Age, etc.

#company-infomation

  %h4 Company Information

  %p If you are tracking <a href='/company.html'>company</a> infomation for your users you may wish to send data that describes their association with a company or companies, you can do this with the <a href='/properties.html#person-properties-companies'>company properties</a>.

#javascript.for-javascript

  %h3.first JavaScript

  #javascript-basic-usage

    %h4 Basic Usage

    %p The most common usage for <code>trak.io.identify()</code> is simply to send a hash of <a href='/properties.html#person'>properties</a> for a person.

    %code.javascript
      :escaped
        trak.io.identify({
          name: "Matthew Spence",
          email: "matt@trak.io",
          gender: "male",
          position: "CTO",
          company: "trak.io"
        })

  #javascript-distinct-id

    %h4 Setting a Person's Distinct ID

    %p If you want to set a person's distinct ID at the same time you can pass in a string value for a distinct ID as the first argument. This is just a short cut to <code><a href='/alias.html'>trak.io.alias()</a></code> and in fact calls that method internally. Check <a href='/alias.html'>docs.trak.io/alias.html</a> for more information specifically on <a href='/alias.html#merging'>merging people</a>.

    %code.javascript
      :escaped
        trak.io.identify("liam@trak.io", {
          name: "Liam Gooding",
          email: "liam@trak.io",
          gender: "male",
          position: "CEO",
          company: "trak.io"
        })
        // Is equivilent to:
        trak.io.alias("liam@trak.io")
        trak.io.identify({
          name: "Liam Gooding",
          email: "liam@trak.io",
          gender: "male",
          position: "CEO",
          company: "trak.io"
        })

  #javascript-company-id

    %h4 Company

    %p
      If you have defined a <a href='/company_id.html'>company ID</a> it will
      automatically be added to the company property and the person will be
      added to the company.

    %code.javascript.spread
      :escaped
        trak.io.distinct_id('matt@trak.io')
        trak.io.company_id('acme_ltd')
        trak.io.identify({
          name: "Matthew Spence",
          email: "matt@trak.io",
          gender: "male",
          position: "CTO",
          // company: [{ company_id: 'acme_ltd' }]
        })

  #javascript-callback

    %h4 Callback

    %p Any function passed as the final argument will be called once the Trak.io API has returned, and be passed the identify's <a href='#return'>return value</a>.

    %code.javascript.spread
      :escaped
        trak.io.identify({
          name: "Matthew Spence",
          email: "matt@trak.io",
          gender: "male",
          position: "CTO",
          company: "trak.io"
        }, function(data) {
          console.log(data) // the return value for identify
        })


    %p.note The HTTP request for identify will only be called if the identify method is passed properties to be set, ie if you just pass a distinct ID it will call <code><a href='/alias.html'>trak.io.alias()</a></code> for you but not send the identify HTTP request. If this is the case, the callback will be executed after the alias HTTP request has return and data will be the response from this.

    %p.note If you pass a distinct ID, properties and a callback, the callback will be executed after both the alias and identify requests have returned.

  #javascript-arguments

    %h4 Arguments

    %p To achieve this versatility with arguments the Trak.io library analyses the type of each argument to determine what it is. Here is the pattern of arguments, their type and whether they are optional (square brackets).

    %code.javascript.spread
      :escaped
        trak.io.identify([distinct_id:String, ] properties:Object [, callback:Function ])

    %table.table.spread
      %thead
        %tr
          %th Argument
          %th Type
          %th Default
          %th Description
      %tbody
        %tr
          %th distinct_id
          %td String
          %td
            %em Current session's distinct id
          %td A distinct ID that you wish to add to the current person. This will call <code><a href='/alias.html'>trak.io.alias()</a></code> internally, check <a href='/alias.html'>docs.trak.io/alias.html</a> for more information specifically on <a href='/alias.html#merging'>merging people</a>.
        %tr
          %th properties
          %td Object
          %td {}
          %td A set of key value <a href='/properties.html#person'>properties</a> for the person.
        %tr
          %th callback
          %td Function
          %td null
          %td A callback function that will be called when the API request completes. It will be passed a <a href='#return'>return value</a> as the first argument.

  #javascript-return-value

    %h4 Return Value

    %p The JavaScript method will make the identify HTTP request asynchronously, returning the <code>trak.io</code> instance immediately. The <a href='#return'>return value</a> of the HTTP request it makes will be passed to the callback function as the first argument.

    %p If it was not necessary to send an HTTP request (because no properties were provided) the JavaScript library will pass this object to its callback.

    %code.json.spread
      :escaped
        { "status": "unnecessary" }

#ruby.for-ruby

  %h3.first Ruby

  %p The most common usage for <code>Trakio.identify</code> is simply to send a hash of <a href='/properties.html#person'>properties</a> for a person.

  %h4 Basic Usage

  %code.ruby.spread
    :preserve
      Trakio.identify distinct_id: 'tobie@trak.io', properties: {
        name: 'Tobie',
        email: 'tobie@trak.io',
        occupation: 'Developer'
      }

  #ruby-company-id

    %h4 Company

    %p
      If you have defined a <a href='/company_id.html'>company ID</a> it will
      automatically be added to the company property and the person will be
      added to the company.

    %code.ruby.spread
      :escaped
        trakio = Trak.new 'my-api-token', company_id: 'acme_ltd', distinct_id: 'matt@trak.io'
        trakio.identify(properties: {
          name: "Matthew Spence",
          email: "matt@trak.io",
          gender: "male",
          position: "CTO",
          // company: [{ company_id: 'acme_ltd' }]
        })

  %h4 Arguments

  %table.table.spread
    %thead
      %tr
        %th Argument
        %th Type
        %th Default
        %th Description
    %tbody
      %tr
        %td distinct_id
        %td String
        %td
          %em The <code>Trakio</code> instance's distinct_id, otherwise required
        %td The distinct id for the person you wish to assign these properties to.
      %tr
        %td properties
        %td Hash
        %td {}
        %td The properties you wish to assign to this person

  %h4 Return Value

  %p The return value from identify is a Ruby <code>Hash</code> similar to the one shown below.

  %code.ruby.spread
    :preserve
      {
        status: 'success',
        trak_id: '123456',
        distinct_ids: ['tobie@trak.io']
      }

#http.for-http

  %h3.first HTTP

  %p A raw HTTP call to <code>api.trak.io/v1/identify</code> has certain requirements and options as outlined in the <a href='/http.html'>introduction to the HTTP API</a>. In addition data specific to the identify action should be sent in the data parameter as a JSON string.

  %code.bash.spread
    :escaped
      $ curl -v -XPOST \
        --data token=YOUR_API_TOKEN \
        --data data='{"distinct_id": "12346789", "properties": { "name": "Matthew Spence" }}' \
        https://api.trak.io/v1/identify

  %h4 Data Object

  %table.table.spread
    %thead
      %tr
        %th Property
        %th Type
        %th Default
        %th Description
    %tbody
      %tr
        %th distinct_id
        %td String
        %td
          %em Required
        %td The distinct id for the person you wish to assign these properties to.
      %tr
        %th properties
        %td Object
        %td
          %em Required
        %td Additional properties for a person, things like their email, name account type etc. See <a href='/properties.html#person'>notes on properties</a> for more information.

  %p.note
    The property hash will be merged with the person's existing properties, if they have any.


#return
  %h3 Return Value

  %p When identify returns you will receive an object with the following structure. This response means your request was successfully received and queued for <a href='/background_processing.html'>proccessing</a>. Under normal conditions this will happen asyncronously within a second or two.

  %code.json.spread
    :escaped
      { "status": "success" }
