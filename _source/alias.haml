---
title: Alias
---

%h2 Alias

%p Alias is how you set additional distinct ids for a person. This is useful if you initially use Trak.io's automatically generated distinct id to identify or track a person but then they login or register and you want to identify them by their email address or your application's id for them. Doing this will allow you to identify users across sessions and devices. But of course you want to tie their activity before and after they logged in together, <code>trak.io.alias()</code> will do this for you.

#javascript.for-javascript

  %h3.first JavaScript

  %h4 Basic Usage

  %p Once a user has logged in or registered you will probably want to start tracking them against their email address:

  %code.javascript
    :escaped
      <script>
        trak.io.alias("<?php $user->email(); ?>");
        // produces something like:
        trak.io.alias("matt@trak.io");
      </script>

  %p Or your application's user id:

  %code.javascript
    :escaped
      <script>
        trak.io.alias("<?php $user->id(); ?>");
        // produces something like:
        trak.io.alias("6353");
      </script>

  %p.note If you pass <code><a href='/identify.html'>trak.io.identify()</a></code> a distinct ID it will call <code>trak.io.alias()</code> internally and there is no need to call it your self. The only reason it has been left in the JavaScript library is so that there is a JavaScript equivilant to the HTTP alias end point.
  %p.note Calling the <code>trak.io.alias()</code> method will automatically change the current distinct id to the alias provided, meaning all future <code><a href='/identify.html'>trak.io.identify()</a></code> and <code><a href='/track.html'>trak.io.track()</a></code> calls will use it as their distinct ID.

  %h4 Callback

  %p Any function passed as the final argument will be called once the Trak.io API has returned, and be passed the alias's <a href='#return'>return value</a>.

  %code.javascript.spread
    :escaped
      trak.io.alias("liam@trak.io", function(data) {
        console.log(data) // the return value for alias
      })

  %p.note The HTTP request for alias will only be called if the alias is different from the distinct ID, ie it will not try to alias the same value to itself. If this is the case, the callback with be executed immediately and data will equal <code>{status: 'unnecessary'}</code>.

  %h4 Arguments

  %table.table.spread
    %thead
      %tr
        %th Argument
        %th Type
        %th Default
        %th Description
    %tbody
      %tr
        %th alias
        %td String, Array
        %td
          %em Required
        %td The distinct id, or array of distinct ids, you would like to add.
      %tr
        %th callback
        %td Function
        %td null
        %td A callback function that will be called when the API request completes. It will be passed a <a href='#return'>return value</a> as the first argument.

  %h4 Return Value

  %p The JavaScript method will make the alias HTTP request asynchronously, returning the <code>trak.io</code> instance immediately. The <a href='#return'>return value</a> of the HTTP request it makes will be passed to the callback function as the first argument.

  %p If it was not necessary to send an HTTP request (because you asked it to alias to the current distinct ID) the JavaScript library will pass this object to its callback.

  %code.json.spread
    :escaped
      {
        "status": "unnecessary"
      }


#ruby.for-ruby

  %h3.first Ruby

  %p Alias allows a user to have more than one <code>distinct_id</code>

  %code.ruby.spread
    :preserve
      Trakio.alias distinct_id: 'tobie@trak.io', alias: 'tobie@example.com'
      Trakio.alias distinct_id: 'tobie@trak.io', alias: ['tobie@example.com', 'tobie@tobie.com']

  %h4 Arguments

  %table.table.spread
    %thead
      %tr
        %th Argument
        %th Type
        %th Default
        %th Description
    %tbody
      %tr
        %td distinct_id
        %td String
        %td
          %em The <code>Trakio</code> instance's distinct_id, otherwise required
        %td The distinct id for the person you wish to assign the alias' to.
      %tr
        %td alias
        %td String or Array
        %td
          %em Required
        %td The other distinct_id's you wish to set for this user

  %h4 Return Value

  %p The return value of alias is a Ruby <code>Hash</code> similar to the one below.

  %code.ruby.spread
    :preserve
      {
        status: 'success',
        trak_id: '123456',
        distinct_ids: ['tobie@trak.io', 'tobie@example.com']
      }

#http.for-http

  %h3.first HTTP

  %p A raw HTTP call to <code>api.trak.io/v1/alias</code> has certain requirements and options as outlined in the <a href='/http.html'>introduction to the HTTP API</a>. In addition data specific to the alias action should be sent in the data parameter as a JSON string.

  %code.bash.spread
    :escaped
      $ curl -v -XPOST \
        --data token=YOUR_API_TOKEN \
        --data data='{"distinct_id": "liam@trak.io", "alias": "liam.gooding@trak.io"}' \
        https://api.trak.io/v1/alias

  %h4 Data Object

  %table.table.spread
    %thead
      %tr
        %th Property
        %th Type
        %th Default
        %th Description
    %tbody
      %tr
        %th distinct_id
        %td String
        %td
          %em Required
        %td A distinct id for the person you wish to add a distinct id to.
      %tr
        %th alias
        %td String, Array
        %td
          %em Required
        %td The distinct id, or array of distinct ids, you would like to add.

#return

  %h3 Return Value

  %p When alias returns you will receive an object with the following structure. This response means your request was successfully received and queued for <a href='/background_processing.html'>proccessing</a>. Under normal conditions this will happen asyncronously within a second or two.

  %code.json.spread
    :escaped
      { "status": "success" }

#merging
  %h3 Merging People

  %p If you send an alias for a distinct id that already exists on an existing person, the two people will be merged. The oldest person will be used as the base object. Properties and events will be copied from the more recent person. If there is a conflict in any of the people's properties the value from most recently updated person will be used.
