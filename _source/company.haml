---
title: Company
---

%h2 Company

%p Company is how you send Trak.io <a href='/properties.html#company'>properties</a> about a company like Name, Industry, Size, Website, etc.

%p.note
  If you want to track details on a person's association with a company rather
  than the company itself, you can do this via the
  <code><a href='/identify.html'>/identify</a></code> endpoint and the special
  <a href='/properties.html#person-properties-companies'>company properties</a>.

#javascript.for-javascript

  %h3.first JavaScript

  %h4 Basic Usage

  %p The most common usage for <code>trak.io.company()</code> is simply to send a hash of <a href='/properties.html#company'>properties</a> for a company.

  %code.javascript
    :escaped
      trak.io.company('acme_ltd', {
        name: "Acme Ltd",
        industry: "rockets",
        size: "100-200",
        website: "www.acmeltd.com"
      })

  #javascript-distinct-id

    %h4 People

    %p
      If you have defined a <a href='/distinct_id.html'>distinct ID</a> it will
      automatically be added to the <code><a href='#people-distinct-ids'>people_distinct_ids</a></code>
      parameter and the person will be added to the company.

    %code.javascript.spread
      :escaped
        trak.io.distinct_id('matt@trak.io')
        trak.io.company_id('acme_ltd')
        trak.io.company({
          name: "Acme Ltd"
        }) // matt@trak.io will be added to the acme_ltd company

  %h4 Callback

  %p Any function passed as the final argument will be called once the Trak.io API has returned, and be passed the identify's <a href='#return'>return value</a>.

  %code.javascript.spread
    :escaped
      trak.io.company('acme_ltd', {
        name: "Acme Ltd",
        industry: "rockets",
        size: "100-200",
        website: "www.acmeltd.com"
      }, function(data) {
        console.log(data) // the return value for identify
      })


  %p.note The HTTP request for company will only be called if the company method is passed properties to be set, ie if you just pass a company ID it will call <code><a href='/company_id.html'>trak.io.company_id()</a></code> for you but not send the company HTTP request. If this is the case, the callback will be executed immediatly.

  %h4 Arguments

  %p To achieve this versatility with arguments the Trak.io library analyses the type of each argument to determine what it is. Here is the pattern of arguments, their type and whether they are optional (square brackets).

  %code.javascript.spread
    :escaped
      trak.io.company([company:String, ] properties:Object [, callback:Function ])

  %table.table.spread
    %thead
      %tr
        %th Argument
        %th Type
        %th Default
        %th Description
    %tbody
      %tr
        %th company_id
        %td String
        %td
          %em Current session's company id
        %td The ID of the company you wish to set properties on.
      %tr
        %th properties
        %td Object
        %td {}
        %td A set of key value <a href='/properties.html#company'>properties</a> for the person.
      %tr
        %th callback
        %td Function
        %td null
        %td A callback function that will be called when the API request completes. It will be passed a <a href='#return'>return value</a> as the first argument.

  %h4 Return Value

  %p The JavaScript method will make the identify HTTP request asynchronously, returning the <code>trak.io</code> instance immediately. The <a href='#return'>return value</a> of the HTTP request it makes will be passed to the callback function as the first argument.

  %p If it was not necessary to send an HTTP request (because no properties were provided) the JavaScript library will pass this object to its callback.

  %code.json.spread
    :escaped
      { "status": "unnecessary" }

#ruby.for-ruby
  %h3.first Ruby

  %p The most common usage for <code>Trakio.company</code> is simply to send a hash of <a href='/properties.html#company'>properties</a> for a company.

  %h4 Basic Usage

  %code.ruby.spread
    :preserve
      Trakio.company company_id: 'acme_ltd', properties: {
        name: "Acme Ltd",
        industry: "rockets",
        size: "100-200",
        website: "www.acmeltd.com"
      }

  #ruby-distinct-id

    %h4 People

    %p
      If you have defined a <a href='/distinct_id.html'>distinct ID</a> it will
      automatically be added to the <code><a href='#people-distinct-ids'>people_distinct_ids</a></code>
      parameter and the person will be added to the company.

    %code.ruby.spread
      :escaped
        trakio = Trak.new 'my-api-token', company_id: 'acme_ltd', distinct_id: 'matt@trak.io'
        trakio.company(properties: {
          name: "Acme Ltd"
        }) // matt@trak.io will be added to acme_ltd

  %h4 Arguments

  %table.table.spread
    %thead
      %tr
        %th Argument
        %th Type
        %th Default
        %th Description
    %tbody
      %tr
        %td distinct_id
        %td String
        %td
          %em The <code>Trakio</code> instance's company_id, otherwise required
        %td The ID of the company you wish to set properties on.
      %tr
        %td properties
        %td Hash
        %td {}
        %td The properties you wish to assign to this company

  %h4 Return Value

  %p The return value from company is a Ruby <code>Hash</code> similar to the one shown below.

  %code.ruby.spread
    :preserve
      { status: 'success' }

#http.for-http

  %h3.first HTTP

  %p A raw HTTP call to <code>api.trak.io/v1/company</code> has certain requirements and options as outlined in the <a href='/http.html'>introduction to the HTTP API</a>. In addition data specific to the company action should be sent in the data parameter as a JSON string.

  %code.bash.spread
    :escaped
      $ curl -v -XPOST \
        --data token=YOUR_API_TOKEN \
        --data data='{"company_id": "12346789", "properties": { "name": "Acme Ltd" }}' \
        https://api.trak.io/v1/company

  %h4 Data Object

  %table.table.spread
    %thead
      %tr
        %th Property
        %th Type
        %th Default
        %th Description
    %tbody
      %tr
        %th company_id
        %td String
        %td
          %em Required
        %td The ID of the company you wish to set properties on.
      %tr
        %th properties
        %td Object
        %td
          %em Required
        %td The properties you wish to assign to this company
      %tr#people-distinct-ids
        %th people_distinct_ids
        %td Array of Strings
        %td
          %em []
        %td Distinct IDs of people to add to this company

  %p.note
    The property hash will be merged with the company's existing properties, if they have any.


#return
  %h3 Return Value

  %p When company returns you will receive an object with the following structure. This response means your request was successfully received and queued for <a href='/background_processing.html'>proccessing</a>. Under normal conditions this will happen asyncronously within a second or two.

  %code.json.spread
    :escaped
      { "status": "success" }
